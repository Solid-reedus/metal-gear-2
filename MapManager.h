#ifndef MAP_MANAGER
#define MAP_MANAGER

#include "TileSheet.h"
#include "SpriteSheet.h"
#include "levelAudioManager.h"
#include "renderingConst.h"
#include "Enemy.h"
#include "EnemyManager.h"
#include "commonTypes.h"
#include "pickupManager.h"


class Enemy;
struct NavNode
{
	NavNode* t;
	NavNode* r;
	NavNode* b;
	NavNode* l;
	int2 pos;
};

struct NavMesh
{
	NavNode* navNodes;
	int size;
};

class MapManager
{
	public:

	struct RoomStruct
	{
		int2* ptrArrayColliders = nullptr;
		int2* ptrArrayCrouchAreas = nullptr;
		int2* ptrArrayTeleportMarkers = nullptr;
		int2* ptrArrayVisibleCrouchAreas = nullptr;
		int colliderCount = 0;
		int crouchAreaCount = 0;
		int teleportMakerCount = 0;
		int visibleCrouchAreaCount = 0;
		Surface* renderSurf = nullptr;
		Surface* collisionMask = nullptr;

		~RoomStruct()
		{
			delete[] ptrArrayColliders;
			delete[] ptrArrayCrouchAreas;
			delete[] ptrArrayTeleportMarkers;
			delete[] ptrArrayVisibleCrouchAreas;
			if (collisionMask != nullptr)
			{
				delete collisionMask;
			}
			if (renderSurf != nullptr)
			{
				delete renderSurf;
			}
		}
	};


	MapManager(int2 p_mapRoomSize, char* p_csvMapFile, char* p_csvCollisionFile, LevelAudioManager* p_LevelAudioManager, Surface* p_screen);
	~MapManager();

	void Render();

	// needs inprovement
	void RenderSecondLayer(int2 p_playerPos, bool p_isCrouching);
	void InitTileSheet(int2 p_tilesheetSize, char* p_spritesheetImage, Surface* p_ptrScreen);

	void SetNewRoom(int2 p_pos);
	void IncrementToNewRoom(int2 p_pos);
	int2 GetRoomSize() const { return m_roomSize; };
	const Surface* GetCurrentCollisionMask() const { return rooms->data[m_currentRoom.x + m_currentRoom.y * m_mapRoomSize.x].collisionMask; };
	int2 GetCurrentRoom() const { return m_currentRoom; };
	int GetCurrentRoomIndex() const { return m_currentRoom.x + m_currentRoom.y * m_mapRoomSize.x;};
	DymArr<Enemy*>* GetEnemiesFromCsv(char* p_csvFile, SpriteSheet* p_spritesheet, const int2* p_camPos);
	const int2 GetMapRoomSize() const { return m_mapRoomSize; };

	NavMesh& GetNavMesh() { return m_navNodes; };
	PickupManager* GetPickupManager() { return m_pickupManager; };

	//static constexpr int MAP_ROOM_SIZE_X = 3;
	//static constexpr int MAP_ROOM_SIZE_Y = 5;
	DymArr<RoomStruct>* rooms = nullptr;
	//RoomStruct* rooms; //[MAP_ROOM_SIZE_X * MAP_ROOM_SIZE_Y] ;

	private:

	enum class GameState
	{
		stealth,
		alert,
		evasion,
		caution,
		cutscene,
	};

	// mapManager is pointer to the dynamic array
	int* m_ptrMapArray = nullptr;
	// pitch is used as a pitch for the mapArray to have 2 dimensions in a 1 dimensional array
	int2 m_currentRoom = { 0,0 };

	// m_roomSize is used to get the size of a room in tiles, this is used for knowing how many tiles should be rendered
	int2 m_roomSize;
	int2 m_mapRoomSize;

	//SpriteSheet m_spriteSheet;
	Tilesheet m_TileSheet;
	LevelAudioManager* m_ptrLevelAudioManager = nullptr;
	PickupManager* m_pickupManager;


	struct Marker
	{
		int2 pos;
		int val;
	};

	NavMesh m_navNodes = { nullptr, 0 };

	struct TempNavNode
	{
		int markerValT;
		int markerValR;
		int markerValB;
		int markerValL;
		int2 pos;
	};

	int m_pitch;
	
	// these const vars are used to split the map into set amount of rooms like in the game

	struct markerValues
	{
		static constexpr int MARKER_NODE = 0;
		static constexpr int MARKER_COLLIDER = 5;
		static constexpr int MARKER_CROUCH_AREA = 6;
		static constexpr int MARKER_TELEPORT_MARKER = 8;
		static constexpr int MARKER_VISIBLE_CROUCH_AREA = 9;
		static constexpr int WALK_UP_ENEMY_INS    = 11;
		static constexpr int WALK_RIGHT_ENEMY_INS = 12;
		static constexpr int WALK_DOWN_ENEMY_INS  = 13;
		static constexpr int WALK_LEFT_ENEMY_INS  = 14;

		static constexpr int WAIT_UP_ENEMY_INS    = 15;
		static constexpr int WAIT_RIGHT_ENEMY_INS = 16;
		static constexpr int WAIT_DOWN_ENEMY_INS  = 17;
		static constexpr int WAIT_LEFT_ENEMY_INS  = 18;
	};


	void GetMapFromCsv(char* p_csvFile);
	void GetMapDataFromCsv(char* p_csvFile);
	void SetCollisionMap(char* p_csvFile);

	//this code is based on template code
	int GetLineCount(const char* s) const;

	// this funtion is made with the help of david [PR Y1]
	char* GetCstringFromFile(const char* p_file) const;

	// Function to convert a string to an integer
	// this is generated by chatgpt
	int MapManager::CharToInt(const char* p_char) const;

	Surface* m_screen;

};


#endif // !MAP_MANAGER
